# This file is part of libertine. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT. No part of libertine, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux/libertine/master/COPYRIGHT.


libertine_path_installBuildBinariesProvided()
{
	libertine_path_installBuildBinariesProvided_callback()
	{
		local binary="$core_variable_array_element"

		local binaryFilePath="$(libertine_public_outputBuildSysrootPath)"/usr/bin/"$binary"
		
		if [ ! -x "$binaryFilePath" ]; then
			core_exitError $core_commandLine_exitCode_UNAVAILABLE "Provided build binary (assumed to be in usr/bin) '$binary' is not executable at '$binaryFilePath' for package '$package'"
		fi
		
		if [ -e "$libertine_paths"/build/"$binary" ]; then
			# This can occur currently with build_musl_cross_make_*
			core_exitError $core_commandLine_exitCode_UNAVAILABLE "Provided build binary '$binary' has already been installed by a package previous to '$package'"
		fi
		
		ln -s "$binaryFilePath" "$libertine_paths"/build/"$binary"
	}
	
	core_variable_array_iterate _libertine_compile_buildBinariesProvided libertine_path_installBuildBinariesProvided_callback
}

core_dependency_requires '*' rm mkdir
libertine_path_create()
{
	libertine_paths="$libertine_machineOutputFolderPath"/PATHS
	rm -rf "$libertine_paths"
	
	local pathFolderName
	for pathFolderName in build
	do
		mkdir -m 0755 -p "$libertine_paths"/"$pathFolderName"
	done
}

_libertine_path_systemEssentials()
{
	local callback="$1"
	shift 1
	
	local alreadyHandledProgramNames
	local alreadyHandledProgramNames_initialised
	core_variable_array_initialise alreadyHandledProgramNames
	
	local packageManager
	local programName
	local alreadyInstalledProgramName
	local originalIFS="$IFS"
	local IFS=' '
	while IFS=' ' read -r packageManager programName
	do
		IFS="$originalIFS"
		case "$packageManager" in
			
			'*'|"$core_dependency_packageManager")
				packageManager="$core_dependency_packageManager"
				if core_variable_array_contains alreadyHandledProgramNames "$programName"; then
					continue
				fi
				core_variable_array_append alreadyHandledProgramNames "$programName"
				${callback} "$programName" "$@"
			;;

			# Because of the heredoc, there's an extra blank line. A messy alternative is https://unix.stackexchange.com/questions/102891/posix-compliant-way-to-work-with-a-list-of-filenames-possibly-with-whitespace
			'')
				break
			;;
			
			*)
				continue
			;;
			
		esac
	done <<-EOF
		${_core_dependency_requires}
	EOF
	IFS="$originalIFS"
}

libertine_path_exportPATH()
{
	local path="$(_libertine_compile_pathsPATH)"
	mkdir -m 0755 -p "$path"
	
	_libertine_path_systemEssentials libertine_path_exportPATH_link true
	libertine_path_exportPATH_link sh
	libertine_path_exportPATH_link env
	
	libertine_path_exportPATH_callback()
	{
		local binary="$core_variable_array_element"

		core_message INFO "    ${_libertine_compile_depth}Package '$package' needs binary '$binary' to build"
		libertine_path_exportPATH_link "$binary"
	}
	
	core_variable_array_iterate _libertine_compile_buildBinariesNeeded libertine_path_exportPATH_callback
	
	export PATH="$path"
}

libertine_path_exportPATH_link()
{
	local binary="$1"
	if [ $# -eq 2 ]; then
		local isCalledBySystemEssentials="$2"
	else
		local isCalledBySystemEssentials=false
	fi

	local path="$(_libertine_compile_pathsPATH)"
	
	if [ -x "$path"/"$binary" ]; then
		return 0
	fi
	
	if $isCalledBySystemEssentials; then
		# Eliminate package managers and sudo
		case "$binary" in
		
			sudo)
				return 0
			;;
		
			apk|apt-get|rpm|urpmi|pkg|pkgin|pkg_add|emerge)
				return 0
			;;
			
			# stat awk grep  needed outside of compile
			
			# Miscellaneous code brought in by shellfire that is almost certainly not needed ordinarily
			kill)
				return 0
			;;
		
		esac
	fi
	
	local sourceBinaryName="$binary"
	libertine_path_exportPATH_link_isGccBinary()
	{
		local gccExecutable="$1"
		
		if [ "$gccExecutable" = "$binary" ]; then
		
			case "$package" in
				
				build_*)
					sourceBinaryName="$libertine_build"-"$binary"
				;;
			
				*)
					sourceBinaryName="$libertine_host"-"$binary"
				;;
				
			esac
		fi
	}
	
	libertine_public_gccAndBinutilsExecutables libertine_path_exportPATH_link_isGccBinary
	
	local found=false
	
	local binaryName
	for binaryName in "$sourceBinaryName" "$binary"
	do
		if $found; then
			break
		fi
		
		if [ -x "$libertine_paths"/build/"$sourceBinaryName" ]; then
			ln -s "$libertine_paths"/build/"$sourceBinaryName" "$path"/"$binary"
			found=true
			break
		fi
					
		local knownPath
		for knownPath in /usr/local/bin /usr/bin /bin /usr/local/sbin /usr/sbin /sbin
		do
			if [ -x "$knownPath"/"$binaryName" ]; then
				ln -s "$knownPath"/"$binaryName" "$path"/"$binary"
				found=true
				break
			fi
		done
		
	done
	
	if ! $found; then
		core_exitError $core_commandLine_exitCode_OSFILE "Can not find binary '$binary' in standard path"
	fi
}
